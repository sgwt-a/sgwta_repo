"""
Usage: python3 merge_yamls.py input/merge_main.yaml input/merge_sub.yaml output/merged.yaml

【概要】
・merge_main.yamlとmerge_sub.yamlをマージした結果をmerged.yamlに出力するスクリプト。
・第三引数（出力先ファイルパス）に第一引数を同じファイルパスを指定すると、merge_main.yamlに対して上書きさせることができる。
【詳細】
・リスト型キーについては、値を結合する
・辞書型キーについては、配下のキーを再帰的に処理を繰り返す
・リストではなくスカラーのキーはmerge_sub側で上書きされる
    ※merge_mainとmerge_subの両方に共通して存在するキー：merge_sub側で上書きされる
    　merge_mainには存在せずmerge_sub側の身に存在するキー：merge_subのキーが追加される
"""
import os, sys
import ruamel.yaml
yaml = ruamel.yaml.YAML()
yaml.preserve_quotes = True  # ダブルクォーテーションを保持（インデントは保持されない）

def merge_dicts(dict1, dict2):
    """
    再帰的に2つの辞書をマージする関数。
    """
    for key, value in dict2.items():
        # デバッグ出力
        print("key = ", key)
        print("value = ", value)
        if (
            key in dict1 
            and isinstance(dict1[key], dict) 
            and isinstance(value, dict)
        ):
            # 両方が辞書の場合、再帰的にマージ
            merge_dicts(dict1[key], value)
        elif (
            key in dict1 
            and isinstance(dict1[key], list) 
            and isinstance(value, list)
        ):
            # 両方がリストの場合、結合
            dict1[key] += value

        else:
            # 上書き
            dict1[key] = value
    return dict1

def merge_yaml_files(file1, file2, output_file):
    """
    2つのYAMLファイルをマージして出力する。
    """
    # YAMLファイルを読み込む
    with open(file1, 'r') as f1, open(file2, 'r') as f2:
        data1 = yaml.load(f1)
        data2 = yaml.load(f2)
    # デバッグ出力
    print("data1\n", data1, "\n")
    print("data2\n", data2, "\n")
    # 辞書をマージ
    merged_data = merge_dicts(data1, data2)
    
    # マージしたデータを書き出し
    with open(output_file, 'w') as f_out:
        yaml.dump(merged_data, f_out)

# 使用例
args = sys.argv
file1 = args[1]
file2 = args[2]
output_file = args[3]

merge_yaml_files(file1, file2, output_file)
